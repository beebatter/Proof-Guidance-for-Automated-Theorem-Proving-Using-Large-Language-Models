# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - release

build:       # This job runs in the build stage, which runs first.
  stage: build
  # the image built with the Dockerfile from
  # https://github.com/inpefess/docker-images/blob/master/iprover-builder/Dockerfile
  image: inpefess/iprover-builder
  script:
    - ./configure
    - make build STATIC=true z3=true Z3Lib=/home/opam/z3/build         
  artifacts:
    name: "iprover-$CI_COMMIT_SHORT_SHA"
    paths:
      - iprover-build/
    # note that last build does not expire
    # expire_in: 1 week
    

test:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  image: debian:11.6-slim
  script:
  # for some reason gitlab clears symb. link after build
    - cd iprover-build
    - ./iproveropt --help
    - ./tests_run.sh
# docker does not have python currently
#    - ./tests_run.sh -c iproveropt-multi-core.sh -t 10 -o '-n'

build-macos:       # This job runs in the build stage, which runs first.
  stage: build
  # the image built with the Dockerfile from
  # https://github.com/inpefess/docker-images/blob/master/iprover-builder/Dockerfile
  tags:
    - macos  
  script:
    - ./configure
    - make build
    - mv iprover-build iprover-mac-build    
  artifacts:
    name: "iprover-mac-$CI_COMMIT_SHORT_SHA"
    paths:
      - iprover-mac-build/
    # note that last build does not expire
    # expire_in: 1 week

test-macos:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  tags:
    - macos
  script:
  # for some reason gitlab clears symb. link after build
    - cd iprover-mac-build
    - ./iproveropt --help
    - pwd
    - ./tests_run.sh
    - python3 --version
    - which python3
    - ./tests_run.sh -c iproveropt-multi-core.sh -t 10 -o '-n'
# dbg
#    - cd HOS-ML
#    - export PYTHONPATH=./src
#    - python3 ./run_problem.py --no_cores 2 --schedule fof_schedule ../Examples/PUZ001-1.p 5.
#    - cd ../
#    - ./iproveropt-multi-core.sh -v TESTS/PUZ001-1.p


release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG                 # Run this job when a tag is created
  needs:
    - job: build
      artifacts: true
    - job: build-macos
      artifacts: true  
  script:
    - echo "Release $CI_COMMIT_TAG"    
  release:                               # See https://docs.gitlab.com/ee/ci/yaml/#release for available properties
    tag_name: '$CI_COMMIT_TAG'
    description: '$CI_COMMIT_TAG'
    assets:
      links:
        - name: 'Linux build'
          url: '$CI_API_V4_URL/projects/$CI_PROJECT_ID/jobs/artifacts/$CI_COMMIT_REF_NAME/download?job=build'
        - name: 'MacOS build'
          url: '$CI_API_V4_URL/projects/$CI_PROJECT_ID/jobs/artifacts/$CI_COMMIT_REF_NAME/download?job=build-macos'
          
